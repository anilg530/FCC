var mongoose = require('mongoose');
var User = mongoose.model('User');
var Token = mongoose.model('Token')
var crypto = require('crypto');
var nodemailer = require('nodemailer');



module.exports = {
    loginPost: function(req, res, next){
        console.log(req.body.email)
        console.log(req.body.password)
        req.assert('email', 'Email is not valid').isEmail();
        req.assert('email', 'Email cannot be blank').notEmpty();
        req.assert('password', 'Password cannot be blank').notEmpty();
        req.sanitize('email')

        // Check for validation erro
        var errors = req.validationErrors();
        if (errors) return res.status(400).send(errors);
        
        User.findOne({ email: req.body.email }).then(function(docs){
        
            if(docs.password == req.body.password) {
                console.log("Login succesful")
                res.send({ token: generateToken(user), user: user.toJSON() });
                res.render('homepage');
            }
            ;
            var User = docs;
            console.log(User);
            //res.send({ token: generateToken(User), user: User.toJSON() });
            res.render("homepage");
        })
        .catch(function(err) {
            // if (!user) return res.status(401).send({ msg: 'The email address ' + req.body.email + ' is not associated with any account. Double-check your email address and try again.'});
            // console.log('handled error')
            console.log("something is wrong")
        });
         {
           
        
            // user.comparePassword(req.body.password, function (err, isMatch) {
            //     console.log('going in here')
            //     if (!isMatch) return res.status(401).send({ msg: 'Invalid email or password' });
            //     console.log('match found')
            //     // Make sure the user has been verified
            //     if (!user.isVerified) return res.status(401).send({ type: 'not-verified', msg: 'Your account has not been verified.' }); 
            //     console.log('match not found')
            //     // Login successful, write token, and send back user
            //     res.send({ token: generateToken(user), user: user.toJSON() });
            // });
        }
    },
    signupPost: function(req, res, next){
        req.assert('name', 'Name cannot be blank').notEmpty();
        req.assert('email', 'Email is not valid').isEmail();
        req.assert('email', 'Email cannot be blank').notEmpty();
        req.assert('password', 'Password must be at least 4 characters long').len(4);

        //normalization of email
        req.sanitize('email')
        
        // Check for validation errors    
        var errors = req.validationErrors();
        
        if (errors) { return res.status(400).send(errors); }
        
        // Make sure this account doesn't already exist
        User.findOne({ email: req.body.email }, function (err, user) {
            
            // Make sure user doesn't already exist
            if (user) {
                return res.status(400).send({ msg: 'The email address you have entered is already associated with another account.' });
            }
            
            else {
                console.log('there is an error')
                user = new User({ name: req.body.name, email: req.body.email, password: req.body.password });
                user.save(function (err) {
                
                if (err) { 
                    return res.status(500).send({ msg: err.message }); 
                } else {
                    console.log('successfully saved user')
                }
        
                // Create a verification token for this user
                var token = new Token({ _userId: user._id, token: crypto.randomBytes(16).toString('hex') });
        
                // Save the verification token
                token.save(function (err) {
                    if (err) { 
                        return res.status(500).send({ msg: err.message }); 
                    } else {
                        console.log('successfully saved token')
                    }
                    console.log('saving')
                    // Send the email
                    var transporter = nodemailer.createTransport({ 
                        service: 'gmail', 
                        auth: { 
                            user: process.env.EMAIL, 
                            pass: process.env.EMAIL_PASSWORD 
                        } 
                    });
                    var mailOptions = { from: process.env.EMAIL, to: user.email, subject: 'Account Verification Token', text: 'Hello,\n\n' + 'Please verify your account by clicking the link: \nhttp:\/\/' + req.headers.host + '\/confirmation\/' + token.token + '.\n' };
                    
                    //store user email in session
                    req.session.email = user.email
                    console.log("email: " + req.session.email)
                    

                    transporter.sendMail(mailOptions, function (err) {
                        if (err) {
                            console.log('not transporting')
                            return res.status(500).send({ msg: err.message }); 
                        } else {
                            console.log('successfully transported')
                        }
                        res.status(200).send('A verification email has been sent to ' + user.email + '.');
                    });
                });
            });
            }
            
        });

    },

    confirmationPost: function(req,res,next){
        req.assert('email', 'Email is not valid').isEmail();
        req.assert('email', 'Email cannot be blank').notEmpty();
        req.assert('token', 'Token cannot be blank').notEmpty();
        req.sanitize('email');
    
        // Check for validation errors    
        var errors = req.validationErrors();
        if (errors) return res.status(400).send(errors);
    
        // Find a matching token
        Token.findOne({ token: req.body.token }, function (err, token) {
            if (!token) return res.status(400).send({ type: 'not-verified', msg: 'We were unable to find a valid token. Your token my have expired.' });
    
            // If we found a token, find a matching user
            User.findOne({ _id: token._userId }, function (err, user) {
                if (!user) return res.status(400).send({ msg: 'We were unable to find a user for this token.' });
                if (user.isVerified) return res.status(400).send({ type: 'already-verified', msg: 'This user has already been verified.' });
    
                // Verify and save the user
                user.isVerified = true;
                user.save(function (err) {
                    if (err) { return res.status(500).send({ msg: err.message }); }
                    res.status(200).send("The account has been verified. Please log in.");
                });
            });
        });
    }, 

    resendTokenPost: function(req,res,next){
        req.assert('email', 'Email is not valid').isEmail();
        req.assert('email', 'Email cannot be blank').notEmpty();
        req.sanitize('email').normalizeEmail({ remove_dots: false });
    
        // Check for validation errors    
        var errors = req.validationErrors();
        if (errors) return res.status(400).send(errors);
    
        User.findOne({ email: req.body.email }, function (err, user) {
            if (!user) return res.status(400).send({ msg: 'We were unable to find a user with that email.' });
            if (user.isVerified) return res.status(400).send({ msg: 'This account has already been verified. Please log in.' });
    
            // Create a verification token, save it, and send email
            var token = new Token({ _userId: user._id, token: crypto.randomBytes(16).toString('hex') });
    
            // Save the token
            token.save(function (err) {
                if (err) { return res.status(500).send({ msg: err.message }); }
    
                // Send the email
                var transporter = nodemailer.createTransport({ service: 'Sendgrid', auth: { user: process.env.EMAIL, pass: process.env.EMAIL_PASSWORD } });
                var mailOptions = { from: process.env.EMAIL, to: user.email, subject: 'Account Verification Token', text: 'Hello,\n\n' + 'Please verify your account by clicking the link: \nhttp:\/\/' + req.headers.host + '\/confirmation\/' + token.token + '.\n' };
                transporter.sendMail(mailOptions, function (err) {
                    if (err) { return res.status(500).send({ msg: err.message }); }
                    res.status(200).send('A verification email has been sent to ' + user.email + '.');
                });
            });
    
        });
    }
}